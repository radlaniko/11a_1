Az egyszerű változókban egy adatot tároltunk.

Az összetett változókban több, akár különböző adatot is. Ezek voltak a listák, 
sor (tuple),szótár(dictionary).

A függvények szolgáltak arra, hogy zárt programozási egységeket hozzunk létre. 
Akárhányszor és akárhol meghívhattuk.

Eljárás alapú programozás: függvényekkel valósítjuk meg, az adatok 
"nem kiemelt jelentőségűek" a kód szempontjából. Sokkal fontosabbak
azok a műveletek, amikkel előállítjuk a program eredményeit.

Objektumok: azok az összetett adatszerkezetek, ahol nem csak az adatokat tárolom
egy változóban, hanem az adatokon elvégezhető műveleteket is, azaz a függvényeket.

Egy egységbe zárom őket (encapsulation). 

Az objektumokban definiált függvények csak szabályozott módon hívhatók meg, ezért
megkülönböztetjük őket a hagyományos függvényektől, úgy hívjuk őket, 
hogy metódusok.

Osztály(class): az objektum felépítését mondja meg.
Az osztályban határozza meg a programozó, hogy az objektum hogyan működik.
Az osztály az objektum típusa.

Példány: az objektum változó neve.

Szintaktika:
class Osztaly_neve():
	osztalyvaltozok
	metodusok


Példa osztályra:
class Konyvek():
	cim=szerzo=isbn=""
	darab=0

	def filldata(self):
		cim=input("Adja meg a címet!\n")
		szerzo=input("Adja meg a szerzot!\n")


konyvpl=Konyvek()  # példány

Ha a metódust magában a programban hívjuk meg, akkor NameError hibát kapunk.
filldata()

Ha a metódust az osztályból hívjuk meg, akkor TypeError hibát kapunk.
Konyvek.filldata()

A metódusokat a példányból tudom meghívni: ez kötés fogalma. A metódus meghíváshoz
létre kell hoznom a példányt. 
konyvpl.filldata()

self: paraméter, mindig az aktuális példányra mutat. 

Konstruktor metódus: (felépít) változó deklarálás, kezdeti érték beállítás.
Közvetlenül nem lehet meghívni, amikor a példányt létrehozzuk, akkor fut le.
def __init__(self):
	kezdeti érték beállítás

Destruktor metódus: takarítás, memóriaterületek felszabadítása


Származtatás (Derivation):
Amikor egy osztályt egy másikból hozunk létre az a származtatás.
Amiből származtatunk azt szülőosztálynak nevezzük, amit származtattunk
az a gyerekosztály.

A gyerekosztály a szülőosztály összes tulajdonságát(változókat és metódusok)
örökli. Ez az öröklés (inheritance).

A gyerekosztály meg tudja hívni a szülőosztály tulajdonságait, attribútumait, 
azonban a szülőosztály nem tudja meghívni a gyerekosztály attribútumait.

Gyerekosztálynak is lehetnek gyerekosztályai, ebben az esetben a saját 
gyerekosztályai szempontjából szülő osztály lesz.

Gyerekosztálynak mindig több tulajdonsága van, mint a szülő osztálynak.

Szintaktika:
class Gyerekosztaly_neve(Szülőosztály_neve):
	osztálytörzs

Pl.: class Szuloosztaly():
	def szuloosztaly_metodus():
		print("Én vagyok a szülőosztály metódus")

class Gyerekosztaly(Szuloosztaly):
	def gyerekosztaly_metodus():
		print("Én vagyok a gyerekosztály metódus")
































